//         this.init();
    //     }

    //     protected init(): void {
    //         const provider = this.options_.providers?.find(
    //             (p) => p.id == BtcpayBase.identifier
    //         );
    //         if (!provider && !this.options_.apiKey) {
    //             throw new MedusaError(
    //                 MedusaErrorTypes.INVALID_ARGUMENT,
    //                 "btcpay not configured",
    //                 MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //             );
    //         }
    //         this.btcpay_ =
    //             this.btcpay_ ||
    //             new Btcpay({
    //                 apiKey: this.options_.apiKey ?? provider?.options.apiKey
    //             });
    //     }

    //     abstract get paymentIntentOptions(): PaymentIntentOptions;

    //     getPaymentIntentOptions(): Partial<PaymentIntentOptions> {
    //         const options: Partial<PaymentIntentOptions> = {};

    //         if (this?.paymentIntentOptions?.capture_method) {
    //             options.capture_method = this.paymentIntentOptions.capture_method;
    //         }

    //         if (this?.paymentIntentOptions?.setup_future_usage) {
    //             options.setup_future_usage =
    //                 this.paymentIntentOptions.setup_future_usage;
    //         }

    //         if (this?.paymentIntentOptions?.payment_method_types) {
    //             options.payment_method_types =
    //                 this.paymentIntentOptions.payment_method_types;
    //         }

    //         return options;
    //     }

    //     _validateSignature(
    //         btcpay_payment_id: string,
    //         btcpay_order_id: string,
    //         btcpay_signature: string
    //     ): boolean {
    //         // const body = btcpay_order_id + "|" + btcpay_payment_id;
    //         // const provider = this.options_.providers?.find(
    //         //     (p) => p.id == BtcpayBase.identifier
    //         // );

    //         // if (!provider && !this.options_.apiKey) {
    //         //     throw new MedusaError(
    //         //         MedusaErrorTypes.INVALID_ARGUMENT,
    //         //         "btcpay not configured",
    //         //         MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //         //     );
    //         // }
    //         const expectedSignature = crypto
    //             .createHmac(
    //                 "sha256",
    //                 this.options_.key_secret ??
    //                     (provider!.options.key_secret as string)
    //             )
    //             .update(body.toString())
    //             .digest("hex");
    //         return expectedSignature === btcpay_signature;
    //     }

    //     async getBtcpayPaymentStatus(
    //         paymentIntent: Orders.BtcpayOrder,
    //         attempts: {
    //             entity: string;
    //             count: number;
    //             items: Array<Payments.BtcpayPayment>;
    //         }
    //     ): Promise<PaymentSessionStatus> {
    //         if (!paymentIntent) {
    //             return PaymentSessionStatus.ERROR;
    //         } else {
    //             const authorisedAttempts = attempts.items.filter(
    //                 (i) => i.status == PaymentSessionStatus.AUTHORIZED
    //             );
    //             const totalAuthorised = authorisedAttempts.reduce((p, c) => {
    //                 p += parseInt(`${c.amount}`);
    //                 return p;
    //             }, 0);
    //             return totalAuthorised == paymentIntent.amount
    //                 ? PaymentSessionStatus.AUTHORIZED
    //                 : PaymentSessionStatus.REQUIRES_MORE;
    //         }
    //     }

    //     async getPaymentStatus(
    //         paymentSessionData: Record<string, unknown>
    //     ): Promise<PaymentSessionStatus> {
    //         const id = paymentSessionData.id as string;
    //         const orderId = paymentSessionData.order_id as string;
    //         let paymentIntent: Orders.BtcpayOrder;
    //         let paymentsAttempted: {
    //             entity: string;
    //             count: number;
    //             items: Array<Payments.BtcpayPayment>;
    //         };
    //         try {
    //             paymentIntent = await this.btcpay_.orders.fetch(id);
    //             paymentsAttempted = await this.btcpay_.orders.fetchPayments(id);
    //         } catch (e) {
    //             this.logger.warn(
    //                 "received payment data from session not order data"
    //             );
    //             paymentIntent = await this.btcpay_.orders.fetch(orderId);
    //             paymentsAttempted = await this.btcpay_.orders.fetchPayments(
    //                 orderId
    //             );
    //         }

    //         switch (paymentIntent.status) {
    //             // created' | 'authorized' | 'captured' | 'refunded' | 'failed'
    //             case "created":
    //                 return PaymentSessionStatus.REQUIRES_MORE;

    //             case "paid":
    //                 return PaymentSessionStatus.AUTHORIZED;

    //             case "attempted":
    //                 return await this.getBtcpayPaymentStatus(
    //                     paymentIntent,
    //                     paymentsAttempted
    //                 );

    //             default:
    //                 return PaymentSessionStatus.PENDING;
    //         }
    //     }

    //     async updateBtcpayMetadataInCustomer(
    //         customer: CustomerDTO,
    //         parameterName: string,
    //         parameterValue: string
    //     ): Promise<CustomerDTO> {
    //         const metadata = customer.metadata;
    //         let btcpay = metadata?.btcpay as Record<string, string>;
    //         if (btcpay) {
    //             btcpay[parameterName] = parameterValue;
    //         } else {
    //             btcpay = {};
    //             btcpay[parameterName] = parameterValue;
    //         }
    //         //
    //         const x = await updateBtcpayCustomerMetadataWorkflow(
    //             this.container_
    //         ).run({
    //             input: {
    //                 medusa_customer_id: customer.id,
    //                 btcpay
    //             }
    //         });
    //         const result = x.result.customer;

    //         return result;
    //     }
    //     // @Todo refactor this function to 3 simple functions to make it more readable
    //     // 1. check existing customer
    //     // 2. create customer
    //     // 3. update customer

    //     async editExistingRpCustomer(
    //         customer: CustomerDTO,
    //         intentRequest,
    //         extra: HttpTypes.StoreCart
    //     ): Promise<Customers.BtcpayCustomer | undefined> {
    //         let btcpayCustomer: Customers.BtcpayCustomer | undefined;

    //         const btcpay_id =
    //             intentRequest.notes?.btcpay_id ||
    //             (customer.metadata?.btcpay_id as string) ||
    //             (customer.metadata as any)?.btcpay?.rp_customer_id;
    //         try {
    //             btcpayCustomer = await this.btcpay_.customers.fetch(btcpay_id);
    //         } catch (e) {
    //             this.logger.warn(
    //                 "unable to fetch customer in the btcpay payment processor"
    //             );
    //         }
    //         // edit the customer once fetched
    //         if (btcpayCustomer) {
    //             const editEmail = customer.email;
    //             const editName =
    //                 `${customer.first_name} ${customer.last_name}`.trim();
    //             const editPhone =
    //                 customer?.phone ||
    //                 customer?.addresses.find((v) => v.phone != undefined)?.phone;
    //             try {
    //                 const updateBtcpayCustomer = await this.btcpay_.customers.edit(
    //                     btcpayCustomer.id,
    //                     {
    //                         email: editEmail ?? btcpayCustomer.email,
    //                         contact: editPhone ?? btcpayCustomer.contact!,
    //                         name: editName != "" ? editName : btcpayCustomer.name
    //                     }
    //                 );
    //                 btcpayCustomer = updateBtcpayCustomer;
    //             } catch (e) {
    //                 this.logger.warn(
    //                     "unable to edit customer in the btcpay payment processor"
    //                 );
    //             }
    //         }

    //         if (!btcpayCustomer) {
    //             try {
    //                 btcpayCustomer = await this.createBtcpayCustomer(
    //                     customer,

    //                     intentRequest,
    //                     extra
    //                 );
    //             } catch (e) {
    //                 this.logger.error(
    //                     "something is very wrong please check customer in the dashboard."
    //                 );
    //             }
    //         }
    //         return btcpayCustomer; // returning un modified btcpay customer
    //     }

    //     async createBtcpayCustomer(
    //         customer: CustomerDTO,
    //         intentRequest,
    //         extra: HttpTypes.StoreCart
    //     ): Promise<Customers.BtcpayCustomer | undefined> {
    //         let btcpayCustomer: Customers.BtcpayCustomer;
    //         const phone =
    //             customer.phone ??
    //             extra.billing_address?.phone ??
    //             customer?.addresses.find((v) => v.phone != undefined)?.phone;

    //         const gstin = (customer?.metadata?.gstin as string) ?? undefined;
    //         if (!phone) {
    //             throw new Error("phone number to create btcpay customer");
    //         }
    //         if (!customer.email) {
    //             throw new Error("email to create btcpay customer");
    //         }
    //         const firstName = customer.first_name ?? "";
    //         const lastName = customer.last_name ?? "";
    //         try {
    //             const customerParams: Customers.BtcpayCustomerCreateRequestBody = {
    //                 email: customer.email,
    //                 contact: phone,
    //                 gstin: gstin,
    //                 fail_existing: 0,
    //                 name: `${firstName} ${lastName} `,
    //                 notes: {
    //                     updated_at: new Date().toISOString()
    //                 }
    //             };
    //             btcpayCustomer = await this.btcpay_.customers.create(
    //                 customerParams
    //             );

    //             intentRequest.notes!.btcpay_id = btcpayCustomer?.id;
    //             if (customer && customer.id) {
    //                 await this.updateBtcpayMetadataInCustomer(
    //                     customer,
    //                     "rp_customer_id",
    //                     btcpayCustomer.id
    //                 );
    //             }
    //             return btcpayCustomer;
    //         } catch (e) {
    //             this.logger.error(
    //                 "unable to create customer in the btcpay payment processor"
    //             );
    //             return;
    //         }
    //     }

    //     async pollAndRetrieveCustomer(
    //         customer: CustomerDTO
    //     ): Promise<Customers.BtcpayCustomer> {
    //         let customerList: Customers.BtcpayCustomer[] = [];
    //         let btcpayCustomer: Customers.BtcpayCustomer;
    //         const count = 10;
    //         let skip = 0;
    //         do {
    //             customerList = (
    //                 await this.btcpay_.customers.all({
    //                     count,
    //                     skip
    //                 })
    //             )?.items;
    //             btcpayCustomer =
    //                 customerList?.find(
    //                     (c) =>
    //                         c.contact == customer?.phone ||
    //                         c.email == customer.email
    //                 ) ?? customerList?.[0];
    //             if (btcpayCustomer) {
    //                 await this.updateBtcpayMetadataInCustomer(
    //                     customer,
    //                     "rp_customer_id",
    //                     btcpayCustomer.id
    //                 );
    //                 break;
    //             }
    //             if (!customerList || !btcpayCustomer) {
    //                 throw new Error(
    //                     "no customers and cant create customers in btcpay"
    //                 );
    //             }
    //             skip += count;
    //         } while (customerList?.length == 0);

    //         return btcpayCustomer;
    //     }

    //     async fetchOrPollForCustomer(
    //         customer: CustomerDTO
    //     ): Promise<Customers.BtcpayCustomer | undefined> {
    //         let btcpayCustomer: Customers.BtcpayCustomer | undefined;
    //         try {
    //             const rp_customer_id = (
    //                 customer.metadata?.btcpay as Record<string, string>
    //             )?.rp_customer_id;
    //             if (rp_customer_id) {
    //                 btcpayCustomer = await this.btcpay_.customers.fetch(
    //                     rp_customer_id
    //                 );
    //             } else {
    //                 btcpayCustomer = await this.pollAndRetrieveCustomer(customer);

    //                 this.logger.debug(
    //                     `updated customer ${btcpayCustomer.email} with RpId :${btcpayCustomer.id}`
    //                 );
    //             }
    //             return btcpayCustomer;
    //         } catch (e) {
    //             this.logger.error(
    //                 "unable to poll customer in the btcpay payment processor"
    //             );
    //             return;
    //         }
    //     }

    //     async createOrUpdateCustomer(
    //         intentRequest,
    //         customer: CustomerDTO,
    //         extra: HttpTypes.StoreCart
    //     ): Promise<Customers.BtcpayCustomer | undefined> {
    //         let btcpayCustomer: Customers.BtcpayCustomer | undefined;
    //         try {
    //             const btcpay_id =
    //                 (customer.metadata as any)?.btcpay?.rp_customer_id ||
    //                 intentRequest.notes.btcpay_id;
    //             try {
    //                 if (btcpay_id) {
    //                     this.logger.info(
    //                         "the updating  existing customer  in btcpay"
    //                     );

    //                     btcpayCustomer = await this.editExistingRpCustomer(
    //                         customer,
    //                         intentRequest,
    //                         extra
    //                     );
    //                 }
    //             } catch (e) {
    //                 this.logger.info("the customer doesn't exist in razopay");
    //             }
    //             try {
    //                 if (!btcpayCustomer) {
    //                     this.logger.info("the creating  customer  in razopay");

    //                     btcpayCustomer = await this.createBtcpayCustomer(
    //                         customer,
    //                         intentRequest,
    //                         extra
    //                     );
    //                 }
    //             } catch (e) {
    //                 // if customer already exists in btcpay but isn't associated with a customer in medsusa
    //             }
    //             if (!btcpayCustomer) {
    //                 try {
    //                     this.logger.info(
    //                         "relinking  customer  in btcpay by polling"
    //                     );

    //                     btcpayCustomer = await this.fetchOrPollForCustomer(
    //                         customer
    //                     );
    //                 } catch (e) {
    //                     this.logger.error(
    //                         "unable to poll customer customer in the btcpay payment processor"
    //                     );
    //                 }
    //             }
    //             return btcpayCustomer;
    //         } catch (e) {
    //             this.logger.error("unable to retrieve customer from cart");
    //         }
    //         return btcpayCustomer;
    //     }

    //     async initiatePayment(
    //         input: CreatePaymentProviderSession
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         const intentRequestData = this.getPaymentIntentOptions();
    //         const { currency_code, amount } = input;
    //         const { extra } = input.context;
    //         const cart = extra as unknown as StoreCart;
    //         if (!cart) {
    //             throw new MedusaError(
    //                 MedusaError.Types.INVALID_DATA,
    //                 "cart not ready",
    //                 MedusaError.Codes.CART_INCOMPATIBLE_STATE
    //             );
    //         }
    //         const provider = this.options_.providers?.find(
    //             (p) => p.id == BtcpayBase.identifier
    //         );

    //         if (!provider && !this.options_.apiKey) {
    //             throw new MedusaError(
    //                 MedusaErrorTypes.INVALID_ARGUMENT,
    //                 "btcpay not configured",
    //                 MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //             );
    //         }
    //         const sessionNotes = extra?.notes ?? {};
    //         let toPay = getAmountFromSmallestUnit(
    //             Math.round(parseInt(amount.toString())),
    //             currency_code.toUpperCase()
    //         );
    //         toPay =
    //             currency_code.toUpperCase() == "INR" ? toPay * 100 * 100 : toPay;
    //         const intentRequest: Orders.BtcpayOrderCreateRequestBody = {
    //             amount: toPay,
    //             currency: currency_code.toUpperCase(),
    //             notes: {
    //                 ...sessionNotes,
    //                 resource_id: (extra?.resource_id as string) ?? "",
    //                 session_id: input.context.session_id as string,
    //                 cart_id: extra?.id as string
    //             },
    //             payment: {
    //                 capture:
    //                     this.options_.auto_capture ?? provider?.options.auto_capture
    //                         ? "automatic"
    //                         : "manual",
    //                 capture_options: {
    //                     refund_speed:
    //                         this.options_.refund_speed ??
    //                         provider?.options.refund_speed ??
    //                         "normal",
    //                     automatic_expiry_period: Math.max(
    //                         this.options_.automatic_expiry_period ??
    //                             provider?.options.automatic_expiry_period ??
    //                             20,
    //                         12
    //                     ),
    //                     manual_expiry_period: Math.max(
    //                         this.options_.manual_expiry_period ??
    //                             provider?.options.manual_expiry_period ??
    //                             10,
    //                         7200
    //                     )
    //                 }
    //             },
    //             ...intentRequestData
    //         };
    //         let session_data;
    //         const customerDetails =
    //             input.context.customer ?? (extra as any).customer;
    //         try {
    //             const btcpayCustomer = await this.createOrUpdateCustomer(
    //                 intentRequest,
    //                 customerDetails,
    //                 extra as unknown as HttpTypes.StoreCart
    //             );
    //             try {
    //                 if (btcpayCustomer) {
    //                     this.logger.debug(
    //                         `the intent: ${JSON.stringify(intentRequest)}`
    //                     );
    //                 } else {
    //                     this.logger.error("unable to find btcpay customer");
    //                 }
    //                 const phoneNumber =
    //                     customerDetails.phone ?? cart.billing_address?.phone;
    //                 if (!phoneNumber) {
    //                     const e = new MedusaError(
    //                         MedusaError.Types.INVALID_DATA,
    //                         "no phone number",
    //                         MedusaError.Codes.CART_INCOMPATIBLE_STATE
    //                     );
    //                     return this.buildError(
    //                         "An error occurred in InitiatePayment during the " +
    //                             "invalid phone number: " +
    //                             JSON.stringify(e),
    //                         e
    //                     );
    //                 }
    //                 session_data = await this.btcpay_.orders.create({
    //                     ...intentRequest
    //                 });
    //             } catch (e) {
    //                 return this.buildError(
    //                     "An error occurred in InitiatePayment during the " +
    //                         "creation of the btcpay payment intent: " +
    //                         JSON.stringify(e),
    //                     e
    //                 );
    //             }
    //         } catch (e) {
    //             return this.buildError(
    //                 "An error occurred in creating customer request:" + e.message,
    //                 e
    //             );
    //         }
    //         return {
    //             data: { ...session_data, intentRequest: intentRequest }
    //         };
    //     }

    //     async authorizePayment(
    //         paymentSessionData: Record<string, unknown>,
    //         context?: Record<string, unknown>
    //     ): Promise<
    //         | PaymentProviderError
    //         | {
    //               status: PaymentSessionStatus;
    //               data: PaymentProviderSessionResponse;
    //           }
    //     > {
    //         const status = await this.getPaymentStatus(paymentSessionData);
    //         return {
    //             data: {
    //                 ...paymentSessionData
    //             } as PaymentProviderSessionResponse,
    //             status
    //         };
    //     }

    //     async cancelPayment(
    //         paymentSessionData: Record<string, unknown>
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         const error: PaymentProviderError = {
    //             error: "Unable to cancel as btcpay doesn't support cancellation",
    //             code: ErrorCodes.UNSUPPORTED_OPERATION
    //         };
    //         return error;
    //     }

    //     async capturePayment(
    //         paymentSessionData: Record<string, unknown>
    //     ): Promise<PaymentProviderError | Record<string, unknown>> {
    //         const order_id = (paymentSessionData as unknown as Orders.BtcpayOrder)
    //             .id;
    //         const paymentsResponse = await this.btcpay_.orders.fetchPayments(
    //             order_id
    //         );
    //         const possibleCaptures = paymentsResponse.items?.filter(
    //             (item) => item.status == "authorized"
    //         );
    //         const result = possibleCaptures?.map(async (payment) => {
    //             const { id, amount, currency } = payment;
    //             const toPay =
    //                 getAmountFromSmallestUnit(
    //                     Math.round(parseInt(amount.toString())),
    //                     currency.toUpperCase()
    //                 ) * 100;
    //             const paymentIntent = await this.btcpay_.payments.capture(
    //                 id,
    //                 toPay,
    //                 currency as string
    //             );
    //             return paymentIntent;
    //         });
    //         if (result) {
    //             const payments = await Promise.all(result);
    //             const res = payments.reduce(
    //                 (acc, curr) => ((acc[curr.id] = curr), acc),
    //                 {}
    //             );
    //             (paymentSessionData as unknown as Orders.BtcpayOrder).payments =
    //                 res;
    //         }
    //         return paymentSessionData;
    //     }

    //     async deletePayment(
    //         paymentSessionData: Record<string, unknown>
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         return await this.cancelPayment(paymentSessionData);
    //     }

    //     async refundPayment(
    //         paymentSessionData: Record<string, unknown>,
    //         refundAmount: any
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         const id = (paymentSessionData as unknown as Orders.BtcpayOrder)
    //             .id as string;

    //         const paymentList = await this.btcpay_.orders.fetchPayments(id);

    //         const payment_id = paymentList.items?.find((p) => {
    //             return (
    //                 parseInt(`${p.amount}`) >= parseInt(refundAmount.value) * 100 &&
    //                 (p.status == "authorized" || p.status == "captured")
    //             );
    //         })?.id;
    //         if (payment_id) {
    //             const refundRequest = {
    //                 amount: parseInt(refundAmount.value) * 100
    //             };
    //             try {
    //                 const refundSession = await this.btcpay_.payments.refund(
    //                     payment_id,
    //                     refundRequest
    //                 );
    //                 const refundsIssued =
    //                     paymentSessionData.refundSessions as Refunds.BtcpayRefund[];
    //                 if (refundsIssued?.length > 0) {
    //                     refundsIssued.push(refundSession);
    //                 } else {
    //                     paymentSessionData.refundSessions = [refundSession];
    //                 }
    //             } catch (e) {
    //                 return this.buildError("An error occurred in refundPayment", e);
    //             }
    //         }
    //         return paymentSessionData as PaymentProviderSessionResponse;
    //     }

    //     async retrievePayment(
    //         paymentSessionData: Record<string, unknown>
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         let intent;
    //         try {
    //             const id = (paymentSessionData as unknown as Orders.BtcpayOrder)
    //                 .id as string;
    //             intent = await this.btcpay_.orders.fetch(id);
    //         } catch (e) {
    //             const id = (paymentSessionData as unknown as Payments.BtcpayPayment)
    //                 .order_id as string;
    //             try {
    //                 intent = await this.btcpay_.orders.fetch(id);
    //             } catch (e) {
    //                 this.buildError("An error occurred in retrievePayment", e);
    //             }
    //         }
    //         return intent as unknown as PaymentProviderSessionResponse;
    //     }

    //     async updatePayment(
    //         input: UpdatePaymentProviderSession
    //     ): Promise<PaymentProviderError | PaymentProviderSessionResponse> {
    //         const { amount, currency_code, context } = input;
    //         const { customer, billing_address, extra } = context;
    //         if (!billing_address && customer?.addresses?.length == 0) {
    //             return this.buildError(
    //                 "An error occurred in updatePayment during the retrieve of the cart",
    //                 new Error(
    //                     "An error occurred in updatePayment during the retrieve of the cart"
    //                 )
    //             );
    //         }

    //         let refreshedCustomer: CustomerDTO;
    //         let customerPhone = "";
    //         let btcpayId: string;
    //         if (customer) {
    //             try {
    //                 refreshedCustomer = input.context.customer as CustomerDTO;
    //                 btcpayId = (refreshedCustomer?.metadata as any)?.btcpay
    //                     ?.rp_customer_id;
    //                 customerPhone =
    //                     refreshedCustomer?.phone ?? billing_address?.phone ?? "";
    //                 if (
    //                     !refreshedCustomer.addresses.find(
    //                         (v) => v.id == billing_address?.id
    //                     )
    //                 ) {
    //                     this.logger.warn("no customer billing found");
    //                 }
    //             } catch {
    //                 return this.buildError(
    //                     "An error occurred in updatePayment during the retrieve of the customer",
    //                     new Error(
    //                         "An error occurred in updatePayment during the retrieve of the customer"
    //                     )
    //                 );
    //             }
    //         }
    //         const isNonEmptyPhone =
    //             customerPhone || billing_address?.phone || customer?.phone || "";

    //         if (!btcpayId!) {
    //             return this.buildError(
    //                 "btcpay id not supported",
    //                 new Error("the phone number wasn't specified")
    //             );
    //         }

    //         if (btcpayId !== (extra?.customer as any)?.id) {
    //             const phone = isNonEmptyPhone;

    //             if (!phone) {
    //                 this.logger.warn("phone number wasn't specified");
    //                 return this.buildError(
    //                     "An error occurred in updatePayment during the retrieve of the customer",
    //                     new Error("the phone number wasn't specified")
    //                 );
    //             }
    //             const result = await this.initiatePayment(input);
    //             if (isPaymentProviderError(result)) {
    //                 return this.buildError(
    //                     "An error occurred in updatePayment during the initiate of the new payment for the new customer",
    //                     result
    //                 );
    //             }

    //             return result;
    //         } else {
    //             if (!amount) {
    //                 return this.buildError(
    //                     "amount  not valid",
    //                     new MedusaError(
    //                         MedusaErrorTypes.INVALID_DATA,
    //                         "amount  not valid",
    //                         MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //                     )
    //                 );
    //             }
    //             if (!currency_code) {
    //                 return this.buildError(
    //                     "currency code not known",
    //                     new MedusaError(
    //                         MedusaErrorTypes.INVALID_DATA,
    //                         "currency code unknown",
    //                         MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //                     )
    //                 );
    //             }

    //             try {
    //                 const id = extra?.id as string;
    //                 let sessionOrderData: Partial<Orders.BtcpayOrder> = {
    //                     currency: "INR"
    //                 };
    //                 if (id) {
    //                     sessionOrderData = (await this.btcpay_.orders.fetch(
    //                         id
    //                     )) as Partial<Orders.BtcpayOrder>;
    //                     delete sessionOrderData.id;
    //                     delete sessionOrderData.created_at;
    //                 }
    //                 input.currency_code =
    //                     currency_code?.toUpperCase() ??
    //                     sessionOrderData?.currency ??
    //                     "INR";
    //                 const newPaymentSessionOrder = (await this.initiatePayment(
    //                     input
    //                 )) as PaymentProviderSessionResponse;

    //                 return { data: { ...newPaymentSessionOrder.data } };
    //             } catch (e) {
    //                 return this.buildError("An error occurred in updatePayment", e);
    //             }
    //         }
    //     }

    //     async updatePaymentData(
    //         sessionId: string,
    //         data: Record<string, unknown>
    //     ): Promise<PaymentProviderSessionResponse | PaymentProviderError> {
    //         try {
    //             // Prevent from updating the amount from here as it should go through
    //             // the updatePayment method to perform the correct logic
    //             if (data.amount || data.currency) {
    //                 throw new MedusaError(
    //                     MedusaError.Types.INVALID_DATA,
    //                     "Cannot update amount, use updatePayment instead"
    //                 );
    //             }
    //             try {
    //                 const paymentSession = await this.btcpay_.payments.fetch(
    //                     (data.data as Record<string, any>).id as string
    //                 );
    //                 if (data.notes || (data.data as any)?.notes) {
    //                     const notes = data.notes || (data.data as any)?.notes;
    //                     const result = (await this.btcpay_.orders.edit(sessionId, {
    //                         notes: { ...paymentSession.notes, ...notes }
    //                     })) as unknown as PaymentProviderSessionResponse;
    //                     return result;
    //                 } else {
    //                     this.logger.warn(
    //                         "only notes can be updated in btcpay order"
    //                     );
    //                     return paymentSession as unknown as PaymentProviderSessionResponse;
    //                 }
    //             } catch (e) {
    //                 return (data as Record<string, any>).data ?? data;
    //             }
    //         } catch (e) {
    //             return this.buildError("An error occurred in updatePaymentData", e);
    //         }
    //     }
    //     /*
    //   /**
    //    * Constructs Btcpay Webhook event
    //    * @param {object} data - the data of the webhook request: req.body
    //    * @param {object} signature - the Btcpay signature on the event, that
    //    *    ensures integrity of the webhook event
    //    * @return {object} Btcpay Webhook event
    //    */

    //     constructWebhookEvent(data, signature): boolean {
    //         const provider = this.options_.providers?.find(
    //             (p) => p.id == BtcpayBase.identifier
    //         );

    //         if (!provider && !this.options_.apiKey) {
    //             throw new MedusaError(
    //                 MedusaErrorTypes.INVALID_ARGUMENT,
    //                 "btcpay not configured",
    //                 MedusaErrorCodes.CART_INCOMPATIBLE_STATE
    //             );
    //         }
    //         return Btcpay.validateWebhookSignature(
    //             data,
    //             signature,
    //             this.options_.webhook_secret ?? provider?.options.webhook_secret
    //         );
    //     }

    //     protected buildError(
    //         message: string,
    //         e: PaymentProviderError | Error
    //     ): PaymentProviderError {
    //         return {
    //             error: message,
    //             code: "code" in e ? e.code : "",
    //             detail: isPaymentProviderError(e)
    //                 ? `${e.error}${EOL}${e.detail ?? ""}`
    //                 : "detail" in e
    //                 ? e.detail
    //                 : e.message ?? ""
    //         };
    //     }